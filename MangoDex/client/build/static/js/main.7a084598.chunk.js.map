{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","loaded","ethBal","mangBal","amount","componentDidMount","eth","getAccounts","accounts","getChainId","networkId","mangoDex","Contract","MangoDex","abi","networks","address","mango","Mango","setState","getState","alert","error","handleInputChange","event","target","value","type","checked","name","methods","getETHBalance","call","result","getMangoSupply","result2","utils","fromWei","buy","buyMango","send","from","toWei","amountBought","events","Bought","returnValues","_amount","sellMango","approve","amountSold","Sold","this","className","onChange","onClick","href","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a084598.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport MangoDex from \"./contracts/MangoDex.json\";\nimport Mango from \"./contracts/Mango.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { loaded:false, ethBal: 0, mangBal: 0, amount: 0 };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      this.web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      this.accounts = await this.web3.eth.getAccounts();\n\n      // Get the contract instance.\n      this.networkId = await this.web3.eth.getChainId();\n\n      this.mangoDex = new this.web3.eth.Contract(\n        MangoDex.abi,\n        MangoDex.networks[this.networkId] && MangoDex.networks[this.networkId].address,\n      );\n\n      this.mango = new this.web3.eth.Contract(\n        Mango.abi,\n        Mango.networks[this.networkId] && Mango.networks[this.networkId].address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ loaded:true}, this.getState);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  getState = async() => {\n    let result = await this.mangoDex.methods.getETHBalance().call();\n    let result2 = await this.mangoDex.methods.getMangoSupply().call();\n    this.setState({\n      ethBal: this.web3.utils.fromWei(result, 'ether'),\n      mangBal: this.web3.utils.fromWei(result2, 'ether')\n\n    })\n  }\n\n  buy = async() => {\n    const {amount} = this.state;\n    let result = await this.mangoDex.methods.buyMango().send({from:this.accounts[0], value:this.web3.utils.toWei(amount, 'ether')});\n    console.log(result);\n    let amountBought = this.web3.utils.fromWei(result.events.Bought.returnValues._amount);\n    let amountEth = amountBought / 1000;\n    this.setState({\n      mangBal: this.state.mangBal -= amountBought\n    })\n    alert(\"You bought \"+amountBought+\" Mango(MANG)🥭.  Sweet~!\");\n  }\n\n  sellMango = async() => {\n    const {amount} = this.state;\n    await this.mango.methods.approve(\"0x16Ea1832AA56cD3b546100C8f8764741BE253d59\", this.web3.utils.toWei(amount, 'ether')).send({from:this.accounts[0]});\n    let result = await this.mangoDex.methods.sellMango(this.web3.utils.toWei(amount, 'ether')).send({from:this.accounts[0]});\n    console.log(result);\n    let amountSold = this.web3.utils.fromWei(result.events.Sold.returnValues._amount, \"ether\");\n    alert(\"You sold \"+ amountSold+\" Mango(MANG)🥭. Sweet~!\");\n  }\n\n\n  render() {\n    if (!this.state.loaded) {\n      return (\n        <div className=\"App\">\n          <h2>***Connect to the Ropsten testnet***</h2>\n        <h1>Mango Exchange🥭</h1>\n        <div className='Main'>\n        <h3>Mango🥭: {this.state.mangBal}</h3>\n        <h3>ETH ⧫: {this.state.ethBal}</h3>\n        </div>\n        <input type='text' name='amount'onChange={this.handleInputChange}/>\n        <button type='button' onClick={this.buy}>BUY🥭</button>\n        <button type='button' onClick={this.sellMango}>SELL🥭</button>\n       <div className='link'>\n        <p>Mango(MANG)🥭: 0x46ca4a30053662Fd0907eA5e412B09DE4c5e1128</p>\n         <a target='_blank'href='mangosugar.org/MangoStake'><button type='button'>🍹Stake Mango🍹</button></a>\n         </div>\n      </div>\n      );\n    }\n    return (\n      <div className=\"App\">\n        <h1>Mango Exchange🥭</h1>\n        <h4>Current Exchange Rate = 1 ETH for 1000 MANG.</h4>\n        <div className='Main'>\n        <h3>Mango🥭: {this.state.mangBal}</h3>\n        <h3>ETH ⧫: {this.state.ethBal}</h3>\n        </div>\n        <input type='text' name='amount'onChange={this.handleInputChange}/>\n        <button type='button' onClick={this.buy}>BUY🥭</button>\n        <button type='button' onClick={this.sellMango}>SELL🥭</button>\n       <div className='link'>\n        <p>Mango(MANG)🥭: 0x46ca4a30053662Fd0907eA5e412B09DE4c5e1128</p>\n         <a target=''href='http://mangosugar.org/MangoStake'><button type='button'>🍹Stake Mango🍹</button></a>\n         </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}