{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","loaded","balance","juice","amount","mJusAddr","mangoAddr","owner","interestRate","interestInterval","reward","stake","interest","componentDidMount","eth","getAccounts","accounts","getChainId","networkId","mangoJuice","Contract","MangoJuice","abi","networks","address","mango","Mango","setState","getState","alert","error","handleInputChange","event","target","value","type","checked","name","methods","call","result","juiceBalance","from","result2","result3","mJus","result4","getOwner","result5","getInterestRate","result6","getInterestInterval","result7","getStake","result8","utils","fromWei","seeReward","calculateReward","send","viewReward","collectReward","upDateAmount","events","RewardChanged","returnValues","_totalMangoJuice","handleDeposit","approve","toWei","deposit","handleWithdraw","withdraw","StakeChanged","_total","_amount","setInterestRate","newRate","RateChanged","_newRate","this","className","onClick","buyMango","onChange","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe3af8f8.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport MangoJuice from \"./contracts/MangoJuice.json\";\nimport Mango from \"./contracts/Mango.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { \n     loaded:false,\n     balance: 0, \n     juice: 0, \n     amount: 0, \n     mJusAddr: '', \n     mangoAddr: '', \n     owner: '', \n     interestRate: 0, \n     interestInterval: 0,\n     reward: '___',\n     stake: 0,\n     interest: 0\n    };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      this.web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      this.accounts = await this.web3.eth.getAccounts();\n\n      // Get the contract instance.\n      this.networkId = await this.web3.eth.getChainId();\n      \n      this.mangoJuice = new this.web3.eth.Contract(\n        MangoJuice.abi,\n        MangoJuice.networks[this.networkId] && MangoJuice.networks[this.networkId].address,\n      );\n\n      this.mango = new this.web3.eth.Contract(\n        Mango.abi,\n        Mango.networks[this.networkId] && Mango.networks[this.networkId].address,\n      );\n\n      \n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ loaded:true }, this.getState);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  getState = async() => {\n    let result = await this.mangoJuice.methods.balance().call();\n    let result2 = await this.mangoJuice.methods.juiceBalance().call({from:this.accounts[0]});\n    let result3 = await this.mangoJuice.methods.mango().call();\n    let result4 = await this.mangoJuice.methods.mJus().call();\n    let result5 = await this.mangoJuice.methods.getOwner().call();\n    let result6 = await this.mangoJuice.methods.getInterestRate().call();\n    let result7 = await this.mangoJuice.methods.getInterestInterval().call();\n    let result8 = await this.mangoJuice.methods.getStake().call({from:this.accounts[0]});\n    this.setState({\n      balance: this.web3.utils.fromWei(result, 'ether'),\n      juice: this.web3.utils.fromWei(result2, 'ether'),\n      mangoAddr: result3,\n      mJusAddr: result4,\n      owner: result5,\n      interestRate: 100 / result6,\n      interestInterval: 60 / result7,\n      stake: this.web3.utils.fromWei(result8, 'ether')\n    })\n  }\n\n  seeReward = async() => {\n    const{reward} = this.state;\n    await this.mangoJuice.methods.calculateReward(this.accounts[0]).send({from:this.accounts[0]});\n    let result = await this.mangoJuice.methods.viewReward(this.accounts[0]).call();\n    console.log(result);\n    this.setState({\n      reward: this.web3.utils.fromWei(result, 'ether')\n    })\n  }\n\n  collectReward = async() => {\n    let result = await this.mangoJuice.methods.collectReward().send({from:this.accounts[0]});\n    console.log(result);\n    let upDateAmount = this.web3.utils.fromWei(result.events.RewardChanged.returnValues._totalMangoJuice);\n    this.setState({\n      juice: upDateAmount\n    });\n    alert(\"Your reward has been converted to MangoJuice🍹🍹🍹\");\n  }\n\n  handleDeposit = async() => {\n    const {amount} = this.state;\n    let result = await this.mango.methods.approve(this.state.mJusAddr, this.web3.utils.toWei(amount, 'ether')).send({from:this.accounts[0]});\n    console.log(result);\n    let result2 = await this.mangoJuice.methods.deposit(this.web3.utils.toWei(amount, 'ether')).send({from:this.accounts[0]});\n    console.log(result2);\n  }\n\n  handleWithdraw = async() => {\n    const {amount} = this.state;\n    let result = await this.mangoJuice.methods.withdraw(this.web3.utils.toWei(amount, 'ether')).send({from:this.accounts[0]});\n    console.log(result);\n    this.setState({\n      balance: this.web3.utils.fromWei(result.events.StakeChanged.returnValues._total, 'ether'),\n      juice: this.state.juice -= this.web3.utils.fromWei(result.events.StakeChanged.returnValues._amount, 'ether')\n    })\n  }\n\n  setInterestRate = async() => {\n    const {interest} = this.state;\n    let result = await this.mangoJuice.methods.setInterestRate(interest).send({from:this.accounts[0]});\n    console.log(result);\n    let newRate = result.events.RateChanged.returnValues._newRate / 100;\n    console.log(newRate+ '%');\n    this.setState({\n      interestRate: newRate\n    })\n  }\n\n  render() {\n    if (!this.state.loaded) {\n        return (\n          <div className=\"App\">\n             <h1>MangoStake 🥭</h1>\n              <p>Buy juicy Mango, and stake it for some MangoJuice. <button type='button'onClick={this.buyMango}>🥭Get Mango🥭</button></p>\n            <div className=\"Main\">\n              <h2>Mango Staked: 27568🥭</h2>\n              <h3>Your Stake: {this.state.stake}</h3>\n              <h3>Interest Rate: 2% 🍹 per {this.state.interestInterval} minute</h3>\n              <h3>Your earnings: {this.state.reward}  MangoJuice🍹</h3>\n              <button type='button' onClick={this.seeReward}>Calculate Interest Earned</button>\n              <button type='button' onClick={this.collectReward}>Convert reward to MJUS🍹</button>\n              <h3>Your MJUS: {this.state.juice}🍹</h3>\n              <input type='text' name='amount'value={this.state.amount} onChange={this.handleInputChange}/>\n              <button type='button' onClick={this.handleDeposit}>Stake Mango🥭</button>\n              <button type='button' onClick={this.handleWithdraw}>Unstake</button>\n              </div>\n            <div className='InfoBox'>\n              <p>Mango(MANG)🥭: 0x410e4bf19Ff0c56EeDb6B44Db8F86c195a6fBE3D</p>\n              <p>MangoJuice(MJUS)🍹: 0x2ae47cf8f23Af31829B43046cA77f337e310c549</p>\n              <p>Owner: 0x243dbdcA53AAdb430a43877Ae7944d5F9Cd46065</p>\n              </div>\n              <div className='OwnerFunctions'>\n                <input type='text'name='interest'value={this.state.interest} onChange={this.handleInputChange}/>\n                <button type='button' onClick={this.setInterestRate}>SET</button>\n              </div>\n              \n            </div>\n      );\n    }\n    return (\n    <div className=\"App\">\n       <h1>MangoStake 🥭</h1>\n        <p>Buy juicy Mango, and stake it for some MangoJuice. <button type='button'onClick={this.buyMango}>🥭Get Mango🥭</button></p>\n      <div className=\"Main\">\n        <h2>Mango Staked: {this.state.balance}🥭</h2>\n        <h3>Your Stake: {this.state.stake}</h3>\n        <h3>Interest Rate: {this.state.interestRate}% 🍹 per {this.state.interestInterval} minute</h3>\n        <h3>Your earnings: {this.state.reward}  MangoJuice🍹</h3>\n        <button type='button' onClick={this.seeReward}>Calculate Interest Earned</button>\n        <button type='button' onClick={this.collectReward}>Convert reward to MJUS🍹</button>\n        <h3>Your MJUS: {this.state.juice}🍹</h3>\n        <input type='text' name='amount'value={this.state.amount} onChange={this.handleInputChange}/>\n        <button type='button' onClick={this.handleDeposit}>Stake Mango🥭</button>\n        <button type='button' onClick={this.handleWithdraw}>Unstake</button>\n        </div>\n      <div className='InfoBox'>\n        <p>Mango(MANG)🥭: {this.state.mangoAddr}</p>\n        <p>MangoJuice(MJUS)🍹: {this.state.mJusAddr}</p>\n        <p>Owner: {this.state.owner}</p>\n        </div>\n        <div className='OwnerFunctions'>\n          <input type='text'name='interest'value={this.state.interest} onChange={this.handleInputChange}/>\n          <button type='button' onClick={this.setInterestRate}>SET</button>\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}